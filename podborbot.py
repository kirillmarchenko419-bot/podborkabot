import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import sqlite3

# === –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
BOT_TOKEN = "8262805313:AAGjF33gSYGGqVzl1ElEnyzWUEU-wFakVEo"
ADMIN_CHAT_ID = 5541820448  # –í–∞—à Telegram ID
# ===================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
LOCATION, DISTRICT, BUDGET, ROOMS, TYPE, CONTACT = range(6)

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—É
KRASNODAR_PRICES = {
    'studio': '3-4 –º–ª–Ω ‚ÇΩ',
    '1_room': '4.5-6 –º–ª–Ω ‚ÇΩ',
    '2_rooms': '6-8 –º–ª–Ω ‚ÇΩ',
    '3_rooms': '8-12 –º–ª–Ω ‚ÇΩ',
    'new_building': '–æ—Ç 120 —Ç—ã—Å ‚ÇΩ/–º¬≤',
    'secondary': '–æ—Ç 100 —Ç—ã—Å ‚ÇΩ/–º¬≤'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('krasnodar_real_estate.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            location TEXT,
            district TEXT,
            budget TEXT,
            rooms TEXT,
            property_type TEXT,
            phone TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_location_keyboard():
    return ReplyKeyboardMarkup([
        ['üèô –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'],
        ['üåä –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π'],
        ['ü§∑ –ù–µ –≤–∞–∂–Ω–æ']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_krasnodar_district_keyboard():
    return ReplyKeyboardMarkup([
        ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–§–ú–†'],
        ['–ß–ú–†', '–ì–ú–†'],
        ['–Æ–ú–†', '–°–•–ò'],
        ['–†–ò–ü', '–ü–∞—à–∫–æ–≤—Å–∫–∏–π'],
        ['–õ—é–±–æ–π —Ä–∞–π–æ–Ω']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_krai_district_keyboard():
    return ReplyKeyboardMarkup([
        ['–°–æ—á–∏', '–ê–Ω–∞–ø–∞'],
        ['–ì–µ–ª–µ–Ω–¥–∂–∏–∫', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'],
        ['–ê—Ä–º–∞–≤–∏—Ä', '–ï–π—Å–∫'],
        ['–¢—É–∞–ø—Å–µ', '–°–ª–∞–≤—è–Ω—Å–∫-–Ω–∞-–ö—É–±–∞–Ω–∏'],
        ['–õ—é–±–æ–π –≥–æ—Ä–æ–¥']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_budget_keyboard():
    return ReplyKeyboardMarkup([
        ['–¥–æ 3 –º–ª–Ω', '3-5 –º–ª–Ω'],
        ['5-8 –º–ª–Ω', '8-12 –º–ª–Ω'],
        ['12-20 –º–ª–Ω', '20+ –º–ª–Ω']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_rooms_keyboard():
    return ReplyKeyboardMarkup([
        ['–°—Ç—É–¥–∏—è', '1'],
        ['2', '3'],
        ['4+', '–õ—é–±–æ–µ']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_type_keyboard():
    return ReplyKeyboardMarkup([
        ['–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–í—Ç–æ—Ä–∏—á–∫–∞'],
        ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'],
        ['–¢–∞—É–Ω—Ö–∞—É—Å', '–ö–æ—Ç—Ç–µ–¥–∂'],
        ['–õ—é–±–æ–π —Ç–∏–ø']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_contact_keyboard():
    return ReplyKeyboardMarkup([[
        KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    ]], resize_keyboard=True, one_time_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('krasnodar_real_estate.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
        (user_id, user.username, user.first_name, user.last_name)
    )
    conn.commit()
    conn.close()

    welcome_text = (
        "üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø–æ–¥–±–æ—Ä—â–∏–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ –∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "1. –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "2. –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±–∞–∑–µ\n"
        "3. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - —è —Å—Ä–∞–∑—É –≤–∞–º –Ω–∞–ø–∏—à—É!"
    )
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_location_keyboard()
    )
    return LOCATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location_text = update.message.text
    context.user_data['location'] = location_text
    if location_text == 'üèô –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä':
        await update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞:',
            reply_markup=get_krasnodar_district_keyboard()
        )
        return DISTRICT
    elif location_text == 'üåä –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π':
        await update.message.reply_text(
            '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º –∫—Ä–∞–µ:',
            reply_markup=get_krai_district_keyboard()
        )
        return DISTRICT
    else:
        # –ù–µ –≤–∞–∂–Ω–æ
        context.user_data['district'] = '–õ—é–±–æ–π'
        await update.message.reply_text(
            'üí∞ *–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?*',
            parse_mode='Markdown',
            reply_markup=get_budget_keyboard()
        )
        return BUDGET

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
async def district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['district'] = update.message.text
    await update.message.reply_text(
        'üí∞ *–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?*',
        parse_mode='Markdown',
        reply_markup=get_budget_keyboard()
    )
    return BUDGET

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞
async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['budget'] = update.message.text
    await update.message.reply_text(
        'üèò *–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ?*',
        parse_mode='Markdown',
        reply_markup=get_rooms_keyboard()
    )
    return ROOMS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
async def rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rooms'] = update.message.text
    await update.message.reply_text(
        'üè¢ *–ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?*',
        parse_mode='Markdown',
        reply_markup=get_type_keyboard()
    )
    return TYPE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
async def property_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['property_type'] = update.message.text

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    user = update.message.from_user
    user_id = user.id
    user_data = context.user_data

    conn = sqlite3.connect('krasnodar_real_estate.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO requests 
        (user_id, username, first_name, last_name, location, district, budget, rooms, property_type) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        user.username,
        user.first_name,
        user.last_name,
        user_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        user_data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        user_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        user_data.get('rooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        user_data.get('property_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    ))
    conn.commit()
    conn.close()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    summary = (
        "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n"
        f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
        f"(@{user.username})\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {user_data.get('location')}\n"
        f"üèô –†–∞–π–æ–Ω: {user_data.get('district')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {user_data.get('budget')}\n"
        f"üèò –ö–æ–º–Ω–∞—Ç: {user_data.get('rooms')}\n"
        f"üè¢ –¢–∏–ø: {user_data.get('property_type')}\n\n"
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
        "1. –ú—ã –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        "2. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π ‚Äî –Ω–∞–ø–∏—à–µ–º –≤–∞–º!\n"
        "3. –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏"
    )
    await update.message.reply_text(
        summary,
        parse_mode='Markdown',
        reply_markup=get_contact_keyboard()
    )
    return CONTACT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text
    user = update.message.from_user
    user_id = user.id

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    conn = sqlite3.connect('krasnodar_real_estate.db')
    cursor = conn.cursor()
    cursor.execute(
        'UPDATE requests SET phone = ? WHERE user_id = ? AND status = "new"',
        (phone, user_id)
    )
    conn.commit()

    # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM requests WHERE user_id=? AND status="new" ORDER BY created_at DESC LIMIT 1', (user_id,))
    request_data = cursor.fetchone()
    conn.close()

    if request_data:
        # request_data: (id, user_id, username, first_name, last_name, location, district, budget, rooms, property_type, phone, status, created_at)
        (id, user_id_db, username, first_name, last_name, location, district, budget, rooms, property_type, phone_db, status, created_at) = request_data
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                f"üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name}\n"
                f"(@{username})\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n"
                f"üèô –†–∞–π–æ–Ω: {district}\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: {budget}\n"
                f"üèò –ö–æ–º–Ω–∞—Ç: {rooms}\n"
                f"üè¢ –¢–∏–ø: {property_type}"
            ),
            parse_mode='Markdown'
        )

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    final_text = (
        "üéâ *–ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n"
        f"‚úÖ *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:* {phone}\n\n"
        "*–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∂–µ–º—Å—è.*\n\n"
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—É:*\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ 1-–∫–æ–º–Ω–∞—Ç–Ω–æ–π: {KRASNODAR_PRICES['1_room']}\n"
        f"‚Ä¢ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π: {KRASNODAR_PRICES['2_rooms']}\n"
        f"‚Ä¢ –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏: {KRASNODAR_PRICES['new_building']}\n"
        f"‚Ä¢ –í—Ç–æ—Ä–∏—á–∫–∞: {KRASNODAR_PRICES['secondary']}\n\n"
        "*–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*\n"
        "[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª](https://t.me/arenda_Krasnadar_coub)\n\n"
        "*–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start*"
    )
    await update.message.reply_text(
        final_text,
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats_text = (
        "üìä *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ:*\n\n"
        "*–ö–≤–∞—Ä—Ç–∏—Ä—ã:*\n"
        f"‚Ä¢ –°—Ç—É–¥–∏—è: {KRASNODAR_PRICES['studio']}\n"
        f"‚Ä¢ 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è: {KRASNODAR_PRICES['1_room']}\n"
        f"‚Ä¢ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è: {KRASNODAR_PRICES['2_rooms']}\n"
        f"‚Ä¢ 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è: {KRASNODAR_PRICES.get('3_rooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å –º¬≤:*\n"
        f"‚Ä¢ –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏: {KRASNODAR_PRICES['new_building']}\n"
        f"‚Ä¢ –í—Ç–æ—Ä–∏—á–∫–∞: {KRASNODAR_PRICES['secondary']}"
    )
    await update.message.reply_text(stats_text, parse_mode='Markdown')

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
            DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, district)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rooms)],
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, property_type)],
            CONTACT: [
                MessageHandler(filters.CONTACT | filters.TEXT, contact)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", stats))
    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()